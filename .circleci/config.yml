version: 2.1

executors:
  docker-publisher:
    environment:
      IMAGE_TAG: goodrjk/udacity_5:latest
    docker:
      - image: docker:stable

commands:
  destroy-environment:
    description: Destroy cloudformation stack given a workflow ID.
    parameters:
      # Add parameter here   
      id: 
        type: string
      event:
        type: string
      region:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation describe-stack-events --region << parameters.region >> --stack-name Capstone-<< parameters.id >>
            aws cloudformation delete-stack --region << parameters.region >> --stack-name Capstone-<< parameters.id >>
          
jobs:

  lint-code:
    docker:
      - image: circleci/python:3.7.3-stretch
    steps:
      - checkout
      - run:
          name: Lint code
          command: |
            export PATH="$HOME/.local/bin:$PATH"
            make setup
            make install
            make lint
            make test

  docker-load:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build --tag "${IMAGE_TAG}" .
      - run:
          name: Push Docker image
          command: |
            echo "${DOCKERHUB_PASS}" | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
            docker push "${IMAGE_TAG}"

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Store name ID 
          command: echo "export ID_NAME=$(cat name.txt)" >> "$BASH_ENV"
      - run: yum -y install tar gzip
      - run:
          name: Ensure EC2 infrastructure exists
          command: |
            echo ${ID_NAME}
            aws cloudformation deploy \
              --region us-east-1 \
              --template-file .circleci/files/kubernetes.yml \
              --tags project=Capstone \
              --stack-name "Capstone-${ID_NAME}" \
              --parameter-overrides ID="${ID_NAME}"  
              #no_output_timeout: 30m
      - run:
          name: Add EC2 ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --region us-east-1 \
              --filters "Name=tag:Name,Values=Capstone-${ID_NAME}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      - run: cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${ID_NAME}
          event: on_fail
          region: us-east-1

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
        environment:
          PATH: "/usr/local/bin:/usr/local/sbin:/usr/sbin:/usr/bin:/sbin:/bin:/root/.local/bin"
          #TYPEORM_CONNECTION: $TYPEORM_CONNECTION
    steps:
      - run:
          name: Install dependencies - ssh git
          command: |
            apk add --update openssh-client git
      - checkout
      - run: 
          name: Store name ID 
          command: echo "export ID_NAME=$(cat name.txt)" >> "$BASH_ENV"
      - add_ssh_keys:
          fingerprints: ["63:9f:9c:a0:21:84:af:01:f2:a6:c8:16:f8:93:02:13"] 
      - attach_workspace:
          at: ~/
      - run: cat .circleci/ansible/inventory.txt
      - run:
          name: Install dependencies - pip
          command: |
            python3 -m pip install --upgrade pip
      - run:
          name: Install dependencies - awscli
          command: |
            python3 -m pip install --user awscli
      - run:
          name: Install dependencies - ansible
          command: |
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt configure-server.yml
            ansible-playbook -i inventory.txt start-minikube.yml
      # Rollback on failure      
      - destroy-environment:
          id: ${ID_NAME}
          event: on_fail
          region: us-east-1

  deploy-docker:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - run:
          name: Install dependencies - ssh git
          command: |
            apk add --update openssh-client git
      - checkout
      - attach_workspace:
          at: ~/
      - run: cat .circleci/ansible/inventory.txt
      - run:
          name: Install dependencies - pip
          command: |
            python3 -m pip install --upgrade pip
      - run:
          name: Install dependencies - ansible
          command: |
            apk add --update ansible 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-docker.yml

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Store name ID 
          command: echo "export ID_NAME=$(cat name.txt)" >> "$BASH_ENV"
      - run:
          name: Install dependencies - tar gzip
          command: |
            yum -y install tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Remove old stacks and files
          command: |
            aws cloudformation --region=us-east-1 describe-stacks | grep StackName \
                   | awk -F\" '{print $4}' | grep Capstone | grep -v "Capstone-${ID_NAME}" > trash_stacks
            cat trash_stacks
            if [ -s trash_stacks ]; then
               for stack in $(cat trash_stacks); do
                   echo "Deleting $stack"
                   aws cloudformation delete-stack --region us-east-1 --stack-name ${stack} 
               done
            else
               echo "No stacks to delete"
            fi
                    

#--------------------------------------------------------------------------------            

workflows:
  default:
    jobs:
      - lint-code
      - docker-load:
          requires: [lint-code]
      - deploy-infrastructure:
          requires: [docker-load]
#      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - deploy-docker:
          requires: [configure-infrastructure]
      - cleanup:
          requires: [deploy-docker]


